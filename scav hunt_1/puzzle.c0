// Allows you to use I/O functions like print and println
#use <conio>
// Allows you to use string functions like string_join
#use <string>
// Allows you to use utility functions like abs() and min()
#use <util>

bool is_substring(string little, string big) {
  int len = string_length(little);
  int offset = string_length(big) - len;
  while (offset >= 0)
  //@loop_invariant offset <= string_length(big) - string_length(little);
  {
    if (string_equal(little, string_sub(big, offset, offset+len))) return true;
    offset--;
  }
  return false;
}

int common_prefix(string s1, string s2)
//@ensures 0 <= \result && \result <= string_length(s1);
//@ensures 0 <= \result && \result <= string_length(s2);
//@ensures string_equal(string_sub(s1, 0, \result), string_sub(s2, 0, \result));
/*@ensures \result == string_length(s1)
  @     || \result == string_length(s2)
  @     || string_charat(s1, \result) != string_charat(s2, \result); @*/
{

  char[] A = string_to_chararray(s1);
  char[] B = string_to_chararray(s2);
  int i=0;
  for (;i<string_length(s1)&&i<string_length(s2);i++)
  {
   if(A[i]!=B[i]){
   return i;
   }
  }
  if(i==string_length(s1)||i==string_length(s2))
  return i;
  else
  return 0;
}

int find_nonrepeating_position(string s)
//@requires string_length(s) > 0;
//@requires string_charat(s, 0) != string_charat(s, string_length(s) - 1);
//@ensures  0 <= \result && \result < string_length(s)-1;
//@ensures string_charat(s, \result) == string_charat(s, 0);
//@ensures string_charat(s, \result+1) != string_charat(s, 0);
{
  char[] A = string_to_chararray(s);
  for (int i=0; i<string_length(s);i++){
      if(A[i]!=A[0])
      return i-1;
  }

  return 0;
}

string same_start_end(string s)
//@ensures is_substring(\result, s);
/*@ensures string_length(s) < 128
  @     || (string_length(\result) > 1
  @         && string_charat(\result, 0)
  @            == string_charat(\result, string_length(\result) - 1)); @*/
{
  char []A = string_to_chararray(s);
  if (string_length(s)==1)
  return s;

  for (int left=0 ;left<string_length(s)-1;left++)
  {
  for (int right=string_length(s)-1 ;right>left;right--){
     if(A[right]==A[left])
     {
     int len=right-left+1;
     char[]B=alloc_array(char,len+1);
     for (int j=0;j<len;j++)
      B[j]=A[j+left];
      B[len]='\0';
      return string_from_chararray(B);
     }
  }
}
  return "";
}
