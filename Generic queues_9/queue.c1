/*
 * Extended interface of queues
 *
 * 15-122 Principles of Imperative Computation
 */

/*************************/
/*** Library interface ***/
/*************************/

// typedef ______* queue_t;
typedef struct queue_header* queue_t;

/* O(1) */
queue_t queue_new()
  /*@ensures \result != NULL; @*/ ;

/* O(1) */
int queue_size(queue_t Q)
  /*@requires Q != NULL; @*/
  /*@ensures \result >= 0; @*/ ;

/* O(1) -- adds an item to the back of the queue */
void enq(queue_t Q, void* x)
  /*@requires Q != NULL; @*/ ;

/* O(1) -- removes an item from the front of the queue */
void* deq(queue_t Q)
  /*@requires Q != NULL && queue_size(Q) > 0; @*/ ;

/* O(i) -- doesn't remove the item from the queue */
void* queue_peek(queue_t Q, int i)
  /*@requires Q != NULL && 0 <= i && i < queue_size(Q); @*/ ;

/* O(n) */
void queue_reverse(queue_t Q)
  /*@requires Q != NULL; @*/ ;

typedef bool check_property_fn(void* x);

/* O(n) worst case, assuming P is O(1) */
bool queue_all(queue_t Q, check_property_fn* P)
  /*@requires Q != NULL && P != NULL; @*/ ;

typedef void* iterate_fn(void* accum, void* x);

/* O(n) worst case, assuming F is O(1) */
void* queue_iterate(queue_t Q, void* base, iterate_fn* F)
  /*@requires Q != NULL && F != NULL; @*/ ;

/**********************/
/*** Implementation ***/
/**********************/

typedef struct list_node list;
struct list_node {
  void* data;
  list* next;
};

typedef struct queue_header queue;
struct queue_header {
  list* front;
  list* back;
  int size;
};

bool is_inclusive_segment(list* start, list* end, int i) {
  /* FIX ME */
  if (start==NULL)
    return i==0;
  else if(start==end)
    return start->next==NULL&&i==1;
  else if(start!=end)
    return i>1&&is_inclusive_segment(start->next,end,i-1);
  else
    return false;
}

bool is_queue(queue* Q)
{
    return Q!=NULL&&is_inclusive_segment(Q->front, Q->back, Q->size);
}

queue* queue_new()
//@ensures \result!=NULL;
//@ensures is_queue(\result);
{
    queue* Q = alloc(queue);
    Q->front = NULL;
    Q->size =0;
    return Q;
}

int queue_size(queue* Q)
//@requires Q!=NULL;
//@requires is_queue(Q);
//@ensures \result>=0;
{
    return Q->size;
}

void enq(queue* Q, void* x)
//@requires Q!=NULL;
//@requires is_queue(Q);
{
    list* node = alloc(list);
    node->data = x;
    node->next = NULL;
    //if the Q is empty
    if(Q->size==0)
    {
        Q->front = node;
        Q->back = node;
        Q->size = Q->size+1;
    }
    //if the Q is not empty
    else
    {
        Q->back->next = node;
        Q->back = node;
        Q->size=Q->size+1;
    }
}

void* deq(queue* Q)
//@requires Q!=NULL && queue_size(Q)>0;
{
    void* res = Q->front->data;
    Q->front = Q->front->next;
    Q->size = Q->size-1;
    return res;
}

void* queue_peek(queue* Q, int i)
//@requires Q!=NULL && is_queue(Q) && 0<=i&&i<queue_size(Q);
{
    list* tmp = Q->front;
    for(int k=0;k<i;k++)
    {
        Q->front = Q->front->next;
    }
    if(Q->front==NULL)
        return NULL;
    void* res = Q->front->data;
    Q->front = tmp;
    return res;
}

void queue_reverse(queue* Q)
//@requires Q!=NULL;
//@requires is_queue(Q);
{
    if(Q->size==0||Q->size==1)
        return;
    list* prev_front = Q->front;
    list* prev_back = Q->back;

    list* p1 = Q->front;
    list* p2 = Q->front->next;

    while(p1!=Q->back)
    {
        list* tmp = p2->next;
        p2->next = p1;
        p1 = p2;
        p2 = tmp;
    }
    assert(p1==Q->back);
    Q->front = p1;
    Q->back = prev_front;
    Q->back->next = NULL;

}

bool queue_all(queue* Q, check_property_fn* P)
//@requires Q!=NULL &&P!=NULL;
//@requires is_queue(Q);
{
    if(Q->front == NULL)
        return true;
    list* tmp = Q->front;
    while(tmp!= NULL)
    {
        if((*P)(tmp->data)==false)
            return false;
        tmp = tmp->next;
    }
    return true;
}

void* queue_iterate(queue* Q, void* base, iterate_fn* F)
//@requires Q!=NULL && F!=NULL;
//@requires is_queue(Q);
{
    if(Q->front==NULL)
        return base;
    list* tmp = Q->front;
    while(tmp!=NULL)
    {
        base = (*F)(base,tmp->data);
        tmp = tmp->next;
    }
    return base;
}


