//This file is used for implementing bloom2
#use <conio>
#use <string>
#use <util>

// Helper functions
int hash1(string A)
{
    int hash_value =0;
    int temp =0;
    for(int i=0;i<string_length(A);i++)
    {
        char c = string_charat(A,i);
        int v = char_ord(c);
        temp = hash_value;
        if(i<string_length(A)-1)
            hash_value = (v+temp)*31;
        else
            hash_value = v+temp;
    }
    return hash_value;
}
/*
int hash2(string A)
{
    int hash_value =0;
    int temp =0;
    for(int i=0;i<string_length(A);i++)
    {
        char c = string_charat(A,i);
        int v = char_ord(c);
        temp = hash_value;
        if(i<string_length(A)-1)
            hash_value = (v+temp)*20;
        else
            hash_value = v+temp;
    }
    return hash_value;
}
*/

int hash2(string A)
{
    int hash_value =0;
    int temp =0;
    for(int i=0;i<string_length(A);i++)
    {
        char c = string_charat(A,i);
        int v = char_ord(c);
        //temp = hash_value;
        //hash_value = (v+temp)*2034539+1648305882;
        //hash_value = hash_value*134867301 +1983843;
        hash_value = hash_value*124798382+1883834;
        hash_value = hash_value+v;
    }
    return hash_value;

}

int hash3(string A)
{
    int hash_value =0;
    int temp =0;
    for(int i=0;i<string_length(A);i++)
    {
        char c = string_charat(A,i);
        int v = char_ord(c);
        //temp = hash_value;
        //hash_value = (v+temp)*1664525+1013904223;
        hash_value = 1664525*hash_value +1013904223;
        hash_value = hash_value + v;
    }
    return hash_value;

}
bool get_bit(int[] A, int i)
//@requires 0<=i && i/32 <\length(A);
{
    int index = i/32;
    int shift = i%32;
    int value = A[index];
    int key_value = 0;
    if(shift !=0)
        key_value = (value>>(32-shift))&0x00000001;
    else
        key_value = (value&0x00000001);
    if (key_value==1)
        return true;
    else
        return false;
}
void set_bit(int[] A, int i)
//@requires 0<=i && i/32<\length(A);
//@ensures get_bit(A,i);
{
    int index = i/32;
    int shift = i%32;
    if(shift!=0)
        A[index] = A[index]|(0x00000001<<(32-shift));
    else
        A[index] = A[index]|0x00000001;
}

/*** Interface to bloom filters  ***/

//typedef____* bloom_t;
typedef struct bloom_filter* bloom_t;

bloom_t bloom_new(int table_size)
/*@requires table_size>0; @*/
/*@ensures \result !=NULL; @*/;

bool bloom_contains(bloom_t B, string x)
/*@requires B!= NULL; @*/;

void bloom_add(bloom_t B,string x)
/*@requires B!=NULL;  @*/
/*@ensures bloom_contains(B,x); @*/;

/*** Implementation of bloom filters  ***/
typedef struct bloom_filter bloom;
struct bloom_filter{
    int[] data;
    int limit;     //limit == \length(data)
};

bool is_bloom(bloom* B)
{
    if(B==NULL)
        return false;
    if(B->limit==0)
        return false;
    //@assert(\length(B->data)==B->limit);
    return true;
}

bloom* bloom_new(int n)
//@requires 0<= n%32 && n%32<=31;
//@ensures is_bloom(\result);
{
    bloom* B= alloc(bloom);
    if(n%32==0)
    {
        B->data = alloc_array(int,n/32);
        B->limit = n/32;
        return B;
    }
    else
    {
        B->data = alloc_array(int,n/32+1);
        B->limit = n/32+1;
        return B;
    }
}

bool bloom_contains(bloom* B, string x)
//@requires is_bloom(B);
{
    int hash_value1 = hash1(x);
    int hash_value2 = hash2(x);
    int hash_value3 = hash3(x);
    int i1 = abs(hash_value1%((B->limit)*32));
    int i2 = abs(hash_value2%((B->limit)*32));
    int i3 = abs(hash_value3%((B->limit)*32));
    if(get_bit(B->data,i1)&&get_bit(B->data,i2)&&get_bit(B->data,i3))
        return true;
    else
        return false;
}

void bloom_add(bloom* B,string x)
//@requires is_bloom(B);
//@ensures is_bloom(B);
//@ensures bloom_contains(B,x);
{
    int hash_value1 = hash1(x);
    int hash_value2 = hash2(x);
    int hash_value3 = hash3(x);
    int i1 = abs(hash_value1%((B->limit)*32));
    int i2 = abs(hash_value2%((B->limit)*32));
    int i3 = abs(hash_value3%((B->limit)*32));
    set_bit(B->data,i1);
    set_bit(B->data,i2);
    set_bit(B->data,i3);
}
