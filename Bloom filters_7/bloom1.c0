//This file is used to implement bloom1
#use <string>
#use <conio>
#use <util>

/*** Interface to bloom filters ***/

// typedef _____* bloom_t;
typedef struct bloom_filter* bloom_t;

bloom_t bloom_new(int table_size)
/*@requires table_size>0;  @*/
/*@ensures \result != NULL; @*/;

bool bloom_contains(bloom_t B, string x)
/*@requires B!=NULL; @*/;

void bloom_add(bloom_t B, string x)
/*@requires B!=NULL; @*/
/*@ensures bloom_contains(B,x);  @*/;

/*** Implementation of bloom filters  ***/
int hash_mul31(string A);

typedef struct bloom_filter bloom;
struct bloom_filter{
    bool[] data;
    int capacity;       //capacity ==\length(data)
};

bool is_bloom(bloom* B)
{
    if(B==NULL)
        return false;
    if(B->capacity==0)
        return false;
    //@assert(\length(B->data)==B->capacity);
    return true;
}

bloom* bloom_new(int m)
//@requires m>0;
//@ensures is_bloom(\result);
{
    bloom* B = alloc(bloom);
    B->data = alloc_array(bool,m);
    B->capacity=m;
    return B;
}

bool bloom_contains(bloom* B,string x)
//@requires is_bloom(B);
{
    int hash_value = hash_mul31(x);
    int i1 = abs(hash_value%(B->capacity));
    //int i2 = abs((hash_value/10)%(B->capacity));
    //int i3 = abs((hash_value/100)%(B->capacity));
    if(B->data[i1]==true)
        return true;
    else
        return false;
}

void bloom_add(bloom* B,string x)
//@requires is_bloom(B);
//@ensures is_bloom(B);
//@ensures bloom_contains(B,x);
{
    int hash_value = hash_mul31(x);
    int i1 = abs(hash_value%(B->capacity));
    //int i2 = abs((hash_value/10)%(B->capacity));
    //int i3 = abs((hash_value/100)%(B->capacity));
    if(B->data[i1]==false)
        B->data[i1]=true;
    //if(B->data[i2]==false)
    //    B->data[i2]=true;
    //if(B->data[i3]==false)
    //    B->data[i3]=true;

}

//Hash function for use
int hash_mul31(string A)
{
    int hash_value = 0;
    int temp =0;
    for(int i=0;i<string_length(A);i++)
    {
        char c = string_charat(A,i);
        int v = char_ord(c);
        temp = hash_value;
        if(i<string_length(A)-1)
            hash_value = (v+temp)*31;
        else
            hash_value = v+temp;
    }
    return hash_value;
}
